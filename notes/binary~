BINARY NUMBER SYSTEM
====================

+---+---+---+---+---+---+
|2^5|2^4|2^3|2^2|2^1|2^0|
+---+---+---+---+---+---+
|   |  1|  0|  0|  1|  0|
+---+---+---+---+---+---+

10010 = 1*(2^4) + 0*(2^3) + 0*(2^2) + 1*(2^1) + 0*(2^0) = 18

### 8-bit representation: ###

+---+---+---+---+---+---+---+---+
|2^7|2^6|2^5|2^4|2^3|2^2|2^1|2^0|
+---+---+---+---+---+---+---+---+
|   |   |   |   |   |   |   |   |
+---+---+---+---+---+---+---+---+
|128| 64| 32| 16|  8|  4|  2|  1|
+---+---+---+---+---+---+---+---+

11101	= 16+8+4+1	= 29
101011	= 32+8+2+1	= 43
73	= 1001001
127	= 1111111
25	=   11001

A number which starts with 1 but the rest of the numbers are zero is the largest negative number that can be represented with that number of bits. 

### Adding binary numbers: ###

  11
  101 (5)
+ 011 (3)
-----
 1000 (8)

  11
  111 (7)
+ 011 (3)
-----
 1010 (10)


  1010 (10)
+ 1100 (12)
------
 10110 (22)

### Two's compliment: ###

*** To go from positive to negative and vice-versa, FLIP the bits and ADD 1 ***

3  = 011
2  = 010
1  = 001
0  = 000
-1 = 111
-2 = 110
-3 = 101
-4 = 100 (cannot use the flip rule on this one!)

All POSITIVE numbers will start with 0
All NEGATIVE numbers will start with 1

Subtraction is expressed as addition of a negative number:

3-2 ==> 3+(-2)

  1
  011
+ 110
-----
 1001 == use 3 bits only! ==> 001

A number with only ones is -1.
A number which starts with 1 but the rest of the numbers are 0 is the largest NEGATIVE number that can be represented with that number of bits.
A number which starts with 0 but the rest of the numbers are 1 is the largest POSITIVE number that can be represented with that number of bits.

  1
  01100
+ 11001
-------
 100101 ==> 00101 = 5
     
### Overflows in two's compliment: ###

  1
  011 =  3
+ 010 =  2
-----
  101 = -3 ?!

How is this possible?! Positive + positive != negative!
The 3-bit two's compliment number system is not big enough to go to 3+2=5.
Overflows can also occur with negative numbers! Negative + negative != positive!
   
   1 
  00110 =  6
+ 10101 = -10
-------
  11011

### Multiplication: ###

Use the AND(&) function to multiply: yields 1 only if both are 1

    0010 =  2
x   0011 =  3
--------
    0010
   0010
 0000
0000
--------
    0110 =  6 (4-bit)

     11101 =  -3
x    11101 =  -3
----------
(     1   )
     11101
    00000
   11101
  11101
 11101
----------
     01001 =   9

### Logic gates: ###      

AND (&):				Opposite of AND: NAND

+----+----+-----+	=|)--
| IN | IN | OUT |
+----+----+-----+
|  0 |  0 |   0 |
+----+----+-----+
|  0 |  1 |   0 |
+----+----+-----+
|  1 |  0 |   0 |
+----+----+-----+
|  1 |  1 |   1 |
+----+----+-----+

OR (|):					Opposite of OR: NOR

+----+----+-----+	=)>--
| IN | IN | OUT |
+----+----+-----+
|  0 |  0 |   0 |
+----+----+-----+
|  0 |  1 |   1 |
+----+----+-----+
|  1 |  0 |   1 |
+----+----+-----+
|  1 |  1 |   1 |
+----+----+-----+

XOR (^):				Opposite of XOR: NXOR

+----+----+-----+	=))>--
| IN | IN | OUT |
+----+----+-----+
|  0 |  0 |   0 |
+----+----+-----+
|  0 |  1 |   1 |
+----+----+-----+
|  1 |  0 |   1 |
+----+----+-----+
|  1 |  1 |   0 |
+----+----+-----+

NOT:

+----+-----+		-|>o--
| IN | OUT |
+----+-----+
|  0 |   1 |
+----+-----+
|  1 |   0 |
+----+-----+

The one's compliment is equal to flipping all the bits.
~ x = -x + 1

### Bitwise operators: ###

Left shift (<<):

001 << 001 = 010

Right shift (>>):

101 >> 001 = 10

